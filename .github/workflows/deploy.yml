name: Deploy Config to Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy_config_to_server:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate .env from template
        run: |
          set -e
          cp .env.template .env

          escape() {
            printf '%s' "$1" | sed -e 's/[\/&\\]/\\&/g'
          }

          sed -i "s|{{API_BOT_TOKEN}}|$(escape '${{ secrets.API_BOT_TOKEN }}')|g" .env
          sed -i "s|{{SECRET_ADMIN_KEY}}|$(escape '${{ secrets.SECRET_ADMIN_KEY }}')|g" .env
        
          sed -i "s|{{CARFAX_API_TOKEN}}|$(escape '${{ secrets.CARFAX_API_TOKEN }}')|g" .env
        
          sed -i "s|{{STRIPE_SECRET_KEY}}|$(escape '${{ secrets.STRIPE_SECRET_KEY }}')|g" .env
          sed -i "s|{{STRIPE_WEBHOOK_SECRET}}|$(escape '${{ secrets.STRIPE_WEBHOOK_SECRET }}')|g" .env
        
          sed -i "s|{{AUCTION_API_KEY}}|$(escape '${{ secrets.AUCTION_API_KEY }}')|g" .env
        
          sed -i "s|{{API_REDIS_PORT}}|$(escape '${{ secrets.API_REDIS_PORT }}')|g" .env
        
          sed -i "s|{{BOT_DB_USER}}|$(escape '${{ secrets.BOT_DB_USER }}')|g" .env
          sed -i "s|{{BOT_DB_PASS}}|$(escape '${{ secrets.BOT_DB_PASS }}')|g" .env
          sed -i "s|{{BOT_DB_NAME}}|$(escape '${{ secrets.BOT_DB_NAME }}')|g" .env
          sed -i "s|{{BOT_DB_HOST}}|$(escape '${{ secrets.BOT_DB_HOST }}')|g" .env
          sed -i "s|{{BOT_DB_PORT}}|$(escape '${{ secrets.BOT_DB_PORT }}')|g" .env
        
          sed -i "s|{{CARFAX_DB_USER}}|$(escape '${{ secrets.CARFAX_DB_USER }}')|g" .env
          sed -i "s|{{CARFAX_DB_PASS}}|$(escape '${{ secrets.CARFAX_DB_PASS }}')|g" .env
          sed -i "s|{{CARFAX_DB_NAME}}|$(escape '${{ secrets.CARFAX_DB_NAME }}')|g" .env
          sed -i "s|{{CARFAX_DB_HOST}}|$(escape '${{ secrets.CARFAX_DB_HOST }}')|g" .env
          sed -i "s|{{CARFAX_DB_PORT}}|$(escape '${{ secrets.CARFAX_DB_PORT }}')|g" .env
        
          sed -i "s|{{PAYMENT_DB_USER}}|$(escape '${{ secrets.PAYMENT_DB_USER }}')|g" .env
          sed -i "s|{{PAYMENT_DB_PASS}}|$(escape '${{ secrets.PAYMENT_DB_PASS }}')|g" .env
          sed -i "s|{{PAYMENT_DB_NAME}}|$(escape '${{ secrets.PAYMENT_DB_NAME }}')|g" .env
          sed -i "s|{{PAYMENT_DB_HOST}}|$(escape '${{ secrets.PAYMENT_DB_HOST }}')|g" .env
          sed -i "s|{{PAYMENT_DB_PORT}}|$(escape '${{ secrets.PAYMENT_DB_PORT }}')|g" .env

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Upload .env to server
        run: |
          scp -i ~/.ssh/id_rsa .env ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/srv/vinaslt/deploy_conf/.env

      - name: SSH into server and restart containers
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: TELEGRAM_BOT_TOKEN,TG_USER_ID
          script: |
            set -e

            cd /srv/vinaslt/deploy_conf

            echo "üîÑ Pulling latest changes from main branch..."
            git fetch origin main
            git reset --hard origin/main

            echo "üê≥ Restarting Docker containers..."
            docker compose pull
            docker compose down
            docker compose --env-file .env up -d --build

            echo "‚è≥ Waiting for containers to stabilize..."
            sleep 10

            echo "ü©∫ Performing health check..."
            if ! docker compose ps | grep -q "Up"; then
              echo "‚ùå Containers failed to start properly. Rolling back..."
              git reset --hard HEAD@{1}
              docker compose down
              docker compose --env-file .env up -d --build

              curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                   -d chat_id=${TG_USER_ID} \
                   -d text="‚ùå Config deployment failed. Rolled back."
              exit 1
            fi

            echo "‚úÖ All containers are running successfully!"
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                 -d chat_id=${TG_USER_ID} \
                 -d text="‚úÖ Config deployment completed successfully!"